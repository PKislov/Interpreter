
/////////////////////////////////////////////////////////////////////////////////////////////////////////
///     main.cpp - главный файл
///
///                     ИНТЕРПРЕТАТОР 1.0
///
///
///     - definitions.h             - препроцессорные утверждения;
///
///
///     - complex.h                 - описание класса complex для работы с комплексными числами;
///
///
///     - notepadregime.h           - функции для работы интерпретатора;
///
///
///     - stringtonumber.h          - описание класса StringToNumber;
///
///
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "definitions.h"
#include "interpreter.h"        // описание класса Interpreter разбора выражения
#include "notepadregime.h"
#include "complex.h"

//==============================================================================================================
// БЛОК ГЛОБАЛЬНЫХ ПЕРЕМЕННЫХ:

    // Флаги, характеризующие результат вычисленного выражения:

bool error, // равен true если в ходе вычисления строки обнаружена ошибка;

     Write, // равен true если вызывались ли в текущем выражении функции write или writeln;

     ThisComment,   // равен true если пустое выражение;

     return_func,   // равен true если в выражении выполнилась функция return.

     run_break,     // равен true если выполнилась команда break
     run_continue;  // равен true если выполнилась команда continue


int count_recurs;   // счетчик рекурсивных вызовов пользовательской функции,
                    // необходим для реализации механизма рекурсии.

int count_loop;     // счетчик вложенности циклов, используется для выполнения
// команд break и continue


int exact = 0; // определяет число знаков после запятой, с которым отображаются
// числа. Может назначаться пользователем с помощью команды exact.
// Если равно 0, то программа отображает результат по своему усмотрению.

int count;  // счетчик. Используется при создании массивов.

// Массив с названиями всех функций, операторов и констант, которые вводит
// пользователь, ни одна пользовательская переменная не должна совпадать с
// ними, имена могут содержать русские и английские символы и знаки _ .
// Имена и значения пользовательских переменных хранятся в отдельном массиве,
// если лексема является переменной, т.е. ThisIs=VARIABLE, то IndexVar хранит
// номер элемента массива, в котором хранится информация о данной переменной -
// её имя и значение. Количесво переменных ограничено.
char ListNamesUnique [][15] =
{
    // функции:
    "abs",      // модуль числа
    "acos",     // арккосинус
    "asin",     // арксинус
    "atg",      // арктангенс
    "actg",     // арккотангенс
    "exp",      // экспонента
    "ln",       // натур. логарифм
    "lg",       // десятичный логарифм
    "tg",       // тангенс
    "sin",      // синус
    "sqr",      // возведение в квадрат
    "sqrt",     // квадратный корень
    "cos",      // косинус
    "ctg",      // котангенс
    "cub",      // возведение в куб
    "cbrt",     // кубический корень
    "round",    // округление до ближайшего целого
    "mod",      // оператор: остаток по модулю от деления двух чисел
    "div",      // оператор: целая часть по модулю от деления двух чисел
    "hypot",    // гипотенуза по двум катетам
    "log",      // логарифм по произвольному основанию
    "rand",     // генерация вещественного случайного числа в заданных пределах
    "mid",      // среднее арифметическое двух чисел
    "max",      // наибольшее из двух чисел
    "min",      // наименьшее из двух чисел
    "nod",      // наибольший общий делитель двух чисел
    "pow",      // степень числа

    // константы:
    "pi",       // 3.14...
    "Eo",       // "эпсилон нулевое"
    "e",        // заряд электрона, Кл
    "c",        // скорость света, м/с
    "g",        // ускорение свободного падения
    "G",        // гравитационная постоянная
    "Vm",       // молярный объем идеального газа при н.у.
    "Na",       // число Авогадро
    "h",        // постоянная Планка
    "k",        // постоянная Больцмана
    "R",        // универсальная газовая постоянная
    "me",       // масса электрона, кг
    "mp",       // масса протона, кг
    "mn",       // масса нейтрона, кг
    "mo",       // "мю нулевое"

    "ans",      // метка ans - результат предыдущего выражения

    "i",        // мнимая единица

    // Функции:
    "arg",      // аргумент комплексного числа
    "module",   // модуль комплексного числа
    "conj",     // сопряженное комплексного числа
    "sh",       // гиперболический синус
    "ch",       // гиперболический косинус
    "th",       // гиперболический тангенс
    "ash",      // гиперболический арксинус
    "ach",      // гиперболический арккосинус
    "ath",      // гиперболический арктангенс
    "acth",     // гиперболический арккотангенс
    "cth",      // гиперболический котангенс
    "sec",      // секанс
    "csec",     // косеканс
    "torad",    // перевод из градусов в радианы
    "todeg",    // перевод из радиан в градусы

    "not",      // логический оператор НЕ
    "and",      // логический оператор И
    "or",       // логический оператор ИЛИ

    "true",     // константа true
    "false",    // константа false

    "integral", // функция вычисления определенного интеграла (3 аргумента)

    "re",       // идентификатор действительной части значения переменной
    "im",       // идентификатор комплексной части значения переменной

    "write",    // функция записи в выходной файл данных
    "writeln",  // функция записи в выходной файл данных с символом новой строки

    "if",       // оператор условия if
    "else",     // оператор else
    "while",    // оператор цикла while
    "for",      // оператор цикла for
    "do",       // оператор do

    "func",     // команда объявления пользовательской функции
    "run",      // команда запуска пользовательской функции

    "return",   // функция return - завершить функцию и возвратить значение

    "getre",    // функция возвращает вещественную часть комплексного числа
    "getim",    // функция возвращает мнимую часть комплексного числа

    "break",    // оператор break
    "continue", // оператор continue

    "cout",     // оператор cout

    "new",      // функция создания массива

    "exit",     // команда exit - завершение приложения
    "exact",    // команда exact - установка точности отображения чисел

    // TODO: сюда заносить новые записи

    ""          // пустая строка означает конец записей
};

//==============================================================================================================

FILE *source, // файл с кодом программы
     *result;  // файл для записи данных функциями write и writeln.


struct complex answer = {0,0}, // предыдущее вычисленное значение, определяет метку ans в
                        // строке-выражении, изначально равно 0

        temp_complex_number, // используется методами Interpreter при вычислении функций и операторов

        null = {0,0}, // возвращается методом interpret, если в выражении нашлась ошибка

        return_value, // возвращается методом interpret, если выполнена функция return
        resultCalcul; //  результат вычисления


struct UserArray // структура пользовательского массива
 *ListArray, // массив пользовательских массивов
  *OLDListArray; // резервная копия массивов на случай ошибки в выражении


struct Variable // структура пользовательской переменной
 *ListVar, // массив пользовательских переменных
  *OLDListVar;  // массив пользовательских переменных до вычисления выражения. Если в ходе
                // вычисления выражения нашлись ошибки, то массив переменных возвращается
                // в исходное состояние, что делается с целью отката нежелательных изменений
                // значений переменных, таким образом ошибка не повлияет на целостность данных.


    struct Function // структура пользовательской функции
      *ListFunctions, // Массив пользовательских функций
      *OLDListFunctions; // массив пользовательских функций до вычисления выражения.
    // Если в ходе вычисления выражения нашлись ошибки, то массив функций возвращается
    // в исходное состояние, что делается с целью отката нежелательных переопределений
    // функций, таким образом ошибка не повлияет на целостность пользовательских данных.

    char **strings;      // массив строк, заполняется в ходе выполнения выражения, а после удаляется


#ifdef WINDOWS
extern char *SOURCE, *RESULT;
#endif

//=============================================================
// ГЛАВНАЯ ФУНКЦИЯ:

int main ()
{
    NotepadRegime (); // пользователь набирает в текстовом
    // файле неограниченое число выражений через ";" и закрывает его сохранив;
    // программа считывает каждое выражение в текстовую строку, вычисляет его,
    // и если нет ошибок, открывает для пользователя выходной файл; просмотрев
    // и закрыв его, пользователь может повторить цикл интерпретатора.

#ifdef WINDOWS
    delete SOURCE;
    delete RESULT;
#endif
    return 0;
}
